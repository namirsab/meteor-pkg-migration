'use strict';

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function importFromMeteorPackage(packageName, symbolName) {
    if (!Package) {
        throw new Error('This package is only working inside Meteor apps');
    } else if (!Package['reactive-var']) {
        throw new Error(symbolName + ' is required, add it with "meteor add ' + packageName + '"');
    } else {
        return Package[packageName][symbolName];
    }
}
var ReactiveVar = importFromMeteorPackage('reactive-var', 'ReactiveVar');
var _height = new ReactiveVar(window.outerHeight);
var _width = new ReactiveVar(window.outerWidth);
var $window = (0, _jquery2.default)(window);

(0, _jquery2.default)(document).ready(function () {
    $window.resize(function () {
        _height.set(window.outerHeight);
        _width.set(window.outerWidth);
    });
});

module.exports = {
    WindowState: {
        isMaximized: function isMaximized() {
            var currentHeight = _height.get();
            var currentWidth = _width.get();
            var availHeight = screen.availHeight * 0.9;
            var availWidth = screen.availWidth * 0.9;

            return !(currentHeight < availHeight || currentWidth < availWidth);
        },


        height: function height() {
            return _height.get();
        },
        width: function width() {
            return _width.get();
        }
    }
};